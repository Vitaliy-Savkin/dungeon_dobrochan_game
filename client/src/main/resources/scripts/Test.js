// Краткое описание скриптового языка JavaScript.

// Значек слева (два слеша) - это коментарий. Все что после него игнорируется интерпретаторами (Можно писать все что угодно — на работоспособность не повлияет).
// Скриптовый язык чувствителен к регистру. "cooldown" и "Cooldown" - не одно и тоже, поэтому имена параметров не менять! (Значения можно менять)
// Не чувствителен к форматированию и переносам строк, но для сохранения читаемости отступы и переносы строк лучше не менять.

// Все абилки выглядят как:
//  var Name = {			ключевое слово var - объявление переменной, Name - имя переменной(абилки),
// 				далее после "=" в фигурных скобках идет тело переменной в виде списка параметров в виде пар:
//				ИмяПараметра:(двоеточие) значениеПараметра,(запятая)
//  param1: "paramValue", 		Значение параметра может быть строкой, тогда оно записывается в кавычках.
//  param2: 9000,			Или числом.
//  param3: RACE_UNDEAD,		Или константой(или другой переменной).
//  params: [ "Value", 42, ], 		Или списком параметров. В этом случае они записываются в квадратных скобках через запятую
//				(может быть пустым списком).
//  actionParam: 				Иди даже функцией. Тело функции в своих фигурных скобочках.
//	function(funcParam1, func param2) {	Параметры функции через запятую в круглых скобках (в каждом конкретном случае потом уточню) (могут не быть).
//  тело функции; 				В теле функции производятся вычисления.
//  return значение;	}			Если функция возвращает какое-то значение, то должно быть слово return перед ним. (может не быть).
// }
// Запятые после последних членов списка не нужны, но и не считаются ошибкой.

// Краткое описание нашей скриптовой системы.

// Скорее всего разные разделы будут по разным файлам, но пока все свалено в одну кучу.

// Пассивные черты будут проверенны один раз при пересчете параметров юнита.
// Активные и условные - при выполнении действия или при наступлении соответствующих условий.

// Кастующий заклинание(использующий навык) представлен переменной initiator.
// Цель заклинания - target.
// В случае пассивных абилок или каста на себя - обе переменные указывают на один юнит (для пассивных абилок рекомендуется использовать initiator).
// Эти переменные имеют поля(свойства) отображающие некоторые характеристики юнитов.
// Обращение к ним просходит через оператор селектор членов: точечка - "."
// Например: initiator.hp - кол-во жизней кастующего, target.str - сила цели.
// Пока сами параметры до конца не продуманны, но будут на все хар-ки и все, что нужно для работы скриптов.

// Так же эти переменные имеют методы(функции).
// Например: target.addEffect("Effect_Regeneration", 1, 3)  - добавляет эффект регенерации для цели силой 1 хп/ход, на 3 хода.
// где addEffect - название функции, далее в скобочках ее параметры.
// Сами функции и их подробное описание пока в разработке.

// ****************************
// ***Константы*** (не трогать, только использовать!)
// ****************************

var RetGetValTest = {
  action: function() {
    var is = initiator.isEnemyNear(target);
    target.addEffect("Hello from js", [2, 5, 6]);
    return is;
  }
}

// Типы абилок
var TYPE_PASSIVE = 0;
var TYPE_ACTIVE = 1;
var TYPE_CONDITIONAL = 2;

// Расы
var RACE_CONSTRUCT = "Construct";
var RACE_ELEMENTAL = "Elemental";
var RACE_DRAGON = "Dragon";
var RACE_UNDEAD = "Undead";
var RACE_NEUTRAL = "Neutral";
var RACE_WIZARD = "Wizard";
var RACE_MONSTER = "Monster";

// Броня
var ARMOR_NONE = 1;
var ARMOR_LIGHT = 2;
var ARMOR_HEAVY = 3;
var ARMOR_JUGGERNAUT = 4;

// Размер
var SIZE_LITTLE = 1;
var SIZE_NORMAL = 2;
var SIZE_LARGE = 3;
var SIZE_GIANT = 4;

// Передвижение
var MOVEMENT_IMMOBILE = 1;
var MOVEMENT_GROUND = 2;
var MOVEMENT_FLY = 3;
var MOVEMENT_TELEPORT = 4;

// Оружие ближнего боя
var MELEE_HANDS = 1;
var MELEE_CLAWS = 2;
var MELEE_ONEHAND = 3;
var MELEE_TWOHAND = 4;

// Оружие дальнего боя
var RANGE_NONE = 1;
var RANGE_THROW = 2;
var RANGE_BOW = 3;
var RANGE_CROSSBOW = 4;


// Тут все просто.
// ********************************
// *** Список всех юнитов ***
// ********************************
// Прежде чем добавить описание юнита надо добавить его в этот список.
// Название в кавычках является идентификатором типа
// и должно совпадать с названием соответствующей переменной(после var).
var Units =
[
  "SkeletonWarrior",
  "BlackDragon"
];

// *******************************************
// *** Описание конкретных юнитов ***
// *******************************************
var Skeleton = {
  name: "Скелет мечник",
  image: "SkeletonWarrior60",
  imageBig: "SkeletonWarrior250",
  description: "Сухие, старые кости шевелятся, когда в глазницах давно погибшего война загорается желтый огонь. Может показаться, что со светом в пещерах лучше. Может и так. Во всяком случае видно, от кого бежать.",

  bLvl: 2,
  bStr: 8,
  bStam: 7,
  bAgi: 7,
  bSens: 7,
  bWill: 1,

  skMelee: 0.9,
  skRange: 0.9,
  skDodge: 0.8,
  skTactic: 0.7,
  skMagic: 0.5,
  skContr: 0.5,
  skConcent: 0.5,

  weaponMelee: MELEE_HANDS,
  movement: MOVEMENT_GROUND,

  size: 2,
  race: RACE_UNDEAD
}

var Dragon = {
  name: "Черный дракон",
  image: "BlackDragon90",
  imageBig: "BlackDragon250",
  description: "Огромная рептилия, прекрасная и устрашающая, черным росчерком пересекающая небо, вызывает восторг и вселяет ужас; она не достижима с земли. На земле драконов можно увидеть лишь изредка - во время отдыха, или у зияющих провалов пещер, где они обитают. Люди часто рассказывают одну и ту же историю: якобы сотня крестьян, вооруженная лишь вилами и топорами, смогла одолеть черного дракона. Стоит ли говорить, что все это - глупые россказни.",

  bLvl: 6,
  bStr: 12,
  bStam: 12,
  bAgi: 10,
  bSens: 8,
  bWill: 8,

  skMelee: 1.1,
  skRange: 0.5,
  skDodge: 1.0,
  skTactic: 1.0,
  skMagic: 0.8,
  skContr: 0.8,
  skConcent: 0.8,

  weaponMelee: MELEE_CLAWS,
  weaponRange: RANGE_NONE,
  movement: MOVEMENT_FLY,

  size: 3,
  race: RACE_DRAGON,
  traits: [ "Trait_Spikes" ]
}


// ****************************
// ***Первичные черты***
// ****************************

var Trait_Recovery = {
  name: "Восстановление",				// Название умения, которое будет отображатбся в игре.
  image: "recovery",					// Имя картинки. Пока условно, но иконки абилок нужны.
  description: "Ускоряет восстановление задоровья.",	// Описание.

// Для следующих 4х характеристик возможно будут значения по умолчанию.
// Т.е. если их не указывать, то они будут равны нулю или пустому множеству.
// Так же, многие скилы, для которых следующие параметры просто не имеют смысла, скорей всего
// будут игнорировать эти параметры и они будут влиять только на текстовое их описание.
  type: TYPE_PASSIVE,				// Тип: пассивный/активный.
  cooldown: 0,						// Задержка в ходах.
  duration: 0,						// Продолжительность в ходах.
  requirements: [  ],				// Требования. В кавычках названия необходимых проходных абилок. Название — то что после "var".

// Большинство черт будут иметь метод "action", выполняющий основное действие скила.
  action: function() {
    initiator.addEffect("Effect_Regeneration", 1) ; // Добавляет эффект регенерации 1хп/ход навсегда.
  }

}

// **********************************
// ***Приобретаемые черты***
// **********************************

var Feature_Strength = {
  name: "Сила",
  image: "Strength",
  description: "Cила существа на 1 больше",

  type: TYPE_PASSIVE,
  cooldown: 0,
  duration: 0,
  requirements: [  ],

  action: function() {
    initiator.addParam("str", 1) ;   // Увеличивает параметр "Сила" на 1.
  }

}

var Feature_Heal = {
  name: "Лечение",
  image: "Heal",
  description: "Восстанавливает цели количество здоровья равное воле колдующего",

  type: TYPE_ACTIVE,
  cooldown: 1,
  duration: 0,
  requirements: [ "Feature_Recovery" ],

  action: function() {
    target.hp += initiator.will;	// Увеличиваем ХП (лечим) цели на величину воли кастующего.
  }

}

var Feature_Regeneration = {
  name: "Регенерация",
  image: "Regeneration",
  description: "Увеличивает регенерацию цели на 1 за каждую единицу воли колдующего выше 5",

  type: TYPE_ACTIVE,
  cooldown: 2,
  duration: 3,
  requirements: [ "Feature_Recovery", "Level: 4" ],	// Требования по уровню вглядят так: "Level:(двоеточие) циферка".

  action: function() {
    var regenPower = initiator.will - 5;				// Сила регена - воля кастующего минус 5.
    if (regenPower > 0)					// Проверяем, что бы сила регена была больше нуля.
      target.addEffect("Effect_Regeneration", regenPower , this.duration)	// Вешаем на цель эффект регенерации.
  }

}

// ****************************
// Эффекты
// ****************************
var Effect_Regeneration = {
  regenPower: 0,

  action: function() {
    initiator.hp += regenPower;
  }
}


